# NormCode Context for LLM Prompts

## Overview

NormCode is a formal notation system for representing semantic relationships, logical structures, and procedural instructions. It provides a systematic way to model inference chains, establish relationships between concepts, and create structured representations of complex logical reasoning.

## Core Concepts

### Fundamental Elements

**Concepts**: Fundamental units with Representation, Sense, and Reference
**Beings**: What concepts refer to in the real world  
**Objects**: Concepts representing entities, things, or defined elements
**Judgements**: Concepts representing conditional relationships or evaluative statements
**Imperatives**: Concepts representing actions, processes, or procedural instructions

### Inference Terminology

**Inference**: The process of deriving conclusions from premises or evidence using logical reasoning
**Inference Ground**: The foundational structure that establishes the basis for logical reasoning
**Inference Chain**: A sequence of logical connections where each step follows from the previous one
**Systematic Plan of Inference**: A structured approach to organizing and executing logical reasoning processes

### Relationship Types

**Functional Relationship** (`<=`): Establishes what function, operation, or definition applies to an element
**Value Relationship** (`<-`): Establishes specific values, instances, or concrete realizations of functional relationships
**Primary Functional**: The main function or operation that defines the core behavior of an element
**Derived Value**: A specific instance that emerges from the application of functional relationships

## Core Operators

### Assignment Operators
- `$=` - Basic assignment/definition
- `$.` - Specification assignment  
- `$::` - Compositional assignment
- `$_..._?` - Placeholder assignment
- `$%` - Abstraction assignment

### Sequencing Operators
- `@If` - Conditional sequencing (if condition)
- `@OnlyIf` - Conditional sequencing (only if condition)
- `@IfOnlyIf` - Biconditional sequencing (if and only if)
- `@by` - Imperative sequencing (by means of)
- `@after` - Future imperative sequencing
- `@before` - Past imperative sequencing
- `@with` - Current imperative sequencing
- `@while` - Object loop while condition
- `@until` - Object loop until condition
- `@afterstep` - Object loop after step

### Grouping Operators
- `&in` - Component grouping
- `&across` - Cross-component grouping
- `&set` - Set grouping
- `&pair` - Pair grouping

### Quantification Operators
- `*every` - Universal quantification
- `*some` - Existential quantification  
- `*count` - Numerical quantification

### Additional Operators (Used in Analysis)
- `$.()` - Entity-to-position mapping
- `::()` - Compositional relationship
- `S.^()` - Component relationship under subject
- `S.<...>` - Subject-predicate grouping

## Layout Formats

### Vertical Layout
```
_inferred_1_
    <= _primary_functional_1_
        <= _primary_functional_2_
        <- _value_for_2_
        ....
    <- _value_3_
        <= _primary_functional_for_3_
        <- _values_for_3_
        ....
    ....
```

### Horizontal Layout
```
|1|_inferred_1_ |1.1|<= _primary_functional_2_for_1_ |1.1.1|<= _primary_functional_for_2_ |/1.1.1||1.1.2|<- _value_for_2_ |/1.1.2| |/1.1| |1.2|<- _value_3_ |1.2.1|<= _primary_functional_for_3_ |/1.2.1||1.2.2|<- _values_for_3_ |/1.2.2||/1.2||/1|
```

### Indexing System
- Root Level: Single digit (1, 2, 3, ...)
- Nested Levels: Dot notation (1.1, 1.2, 1.1.1, 1.1.2, ...)
- Sibling Elements: Increment last number (1.1, 1.2, 1.3, ...)
- Child Elements: Add new level (1.1.1, 1.1.2, ...)

## Question Type Mapping

### "What" Questions
- **Purpose**: Assignment and definition operations
- **Operators**: `$=`, `$.`, `$::`, `$%`
- **Focus**: Entity definition, step identification, specification, abstraction

### "How" Questions  
- **Purpose**: Imperative sequence analysis
- **Operators**: `@by`, `@after`, `@before`, `@with`
- **Focus**: Process analysis, method identification, procedural steps

### "When" Questions
- **Purpose**: Judgement sequence and object loop analysis
- **Operators**: `@If`, `@OnlyIf`, `@IfOnlyIf`, `@while`, `@until`, `@afterstep`
- **Focus**: Conditional analysis, consequence analysis, antecedent analysis

## Structural Elements

### Hierarchy
- **Root Element**: Primary concept being analyzed
- **Nested Elements**: Elements contained within other elements
- **Sibling Elements**: Elements at same hierarchical level
- **Child Elements**: Elements directly contained within parent

### Scope and Boundaries
- **Scope Boundaries**: Limits defining which elements are contained within relationships
- **Reference Mapping**: Bidirectional links between concrete instances and abstract templates
- **Cross-referencing**: Ability to link different parts of inference structure

## Processing Operations

### Core Processes
- **Parsing**: Breaking down complex structures into component parts
- **Validation**: Verifying logical consistency and proper formation
- **Template Abstraction**: Creating generalized patterns for multiple instances
- **Reference Mapping**: Establishing bidirectional links between instances and templates

### Analysis Methods
- **Entity Analysis**: Identifying and defining core entities
- **Process Analysis**: Understanding procedural relationships
- **Conditional Analysis**: Examining if/then relationships
- **Sequential Analysis**: Understanding order and timing relationships

## Notation Conventions

### Brackets and Markers
- `{...}` - Objects/concepts
- `{...}?` - Placeholders
- `<...>` - Predicates
- `(...)` - Operators and groupings
- `|...|` - Index markers (in horizontal layout)

### Formatting Rules
- Indentation indicates nesting levels in vertical layout
- All indexes must be written in full in horizontal layout
- Closing indexes mark end of element scope
- Vertical and horizontal layouts are semantically equivalent

## Key Principles

1. **Logical Consistency**: All relationships must maintain logical validity
2. **Hierarchical Structure**: Elements are organized in clear parent-child relationships
3. **Bidirectional Mapping**: Abstract templates and concrete instances are linked bidirectionally
4. **Systematic Approach**: Inference follows structured, repeatable patterns
5. **Completeness**: All relevant relationships should be explicitly represented

This context provides the foundation for understanding and working with NormCode in all analysis and processing tasks.